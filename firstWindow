/*
1firstWindows.cpp.

A complete Windows program
M. Kishore
Modified: 09/14/2010, 01/13/2015
*/

/*
Create a project folder VC2013 (or your choice):
Run Visual C++ 2013.

VC 2013 - Microsoft Visual Studio:
File>New>Project...

New Project:
Visual C++>Win32>Win32 Project: Browse

Project Location:
Select a folder in which a subfolder VC2013 will be created.
Example: D:\
Select Folder

New Project:
Name: CS2013
Solution Name: CS2013
OK

Win32 Application Wizard -VCPP
Application Settings
Empty Project
Finish

Copy this file:
Copy this file (firstWindows.cpp) to D:\VC2013\VC2013.

Solution Explorer:
It should be on the left side.
Right click: Source Files>Add>Existing Item...

Add Existing Item - VCPP:
Select firstWIndows.cpp

Solution Explorer:
  Doule click fistWindows.cpp

Compile:
  Build>Rebuild Solution

Run:
  Debug>Start without debugging

Exit:
  File>Save All
  File Exit

Restart:
  D:\VC2013\VC2013.sln
*/

#define WIN32_LEAN_AND_MEAN // trim the excess fat from Windows

#include <windows.h> // standard Windows app include

int ww, wh;

// the Windows Procedure event handler
LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	PAINTSTRUCT paintStruct;
	HDC hDC; // device context
	TCHAR str[] = TEXT("Hello, world!"); // text to be displayed

	switch(message)
	{
		case WM_CREATE: // window is being created
			return 0;
			break;

		case WM_PAINT: // window needs updating
			hDC = BeginPaint(hwnd, &paintStruct);

			// set text color to blue
			//SetTextColor(hDC, COLORREF(0x00FF0000));
			SetTextColor(hDC, COLORREF(0xFF0000FF));

			// display text at the center of window
			TextOut(hDC, ww/2, wh/2 - 30, str, (int)wcslen(str));

			EndPaint(hwnd, &paintStruct);
			return 0;
			break;

		case WM_CLOSE: // windows is closing
			PostQuitMessage(0);
			return 0;
			break;

		default:
			break;
	}

	return (DefWindowProc(hwnd, message, wParam, lParam));
}

// The application entry point
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine,
	int nShowCmd)
{
	WNDCLASSEX windowClass; // window class
	HWND hwnd; // window handle
	MSG msg; // message
	bool done; // flag saying when your app is complete
	
	// fill out the window class structure
	windowClass.cbSize = sizeof(WNDCLASSEX);
	windowClass.style = CS_HREDRAW | CS_VREDRAW;
	windowClass.lpfnWndProc = WndProc;
	windowClass.cbClsExtra = 0;
	windowClass.cbWndExtra = 0;
	windowClass.hInstance = hInstance;
	windowClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	windowClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	windowClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	windowClass.lpszMenuName = NULL;
	windowClass.lpszClassName = TEXT("MyClass");
	windowClass.hIconSm = LoadIcon(NULL, IDI_WINLOGO);

	// register the window class
	if (!RegisterClassEx(&windowClass))
		return 0;

	int sw, sh;
	sw = GetSystemMetrics(SM_CXSCREEN);
	sh = GetSystemMetrics(SM_CYSCREEN);
	ww = sw / 2;
	wh = sh / 2;

	// class registered, so now create your window
	hwnd = CreateWindowEx(NULL, // extended style
		TEXT("MyClass"), // class name
		TEXT("Window Program"), // app name
		WS_OVERLAPPEDWINDOW | // window style
		WS_VISIBLE |
		WS_SYSMENU,
		sw/4, sh/4,
		ww, wh,
//		0, 0, //100, 100, // coordinate of upper left corner
//		400, 400, // width, height
		NULL, // handle to parent
		NULL, // handle to menu
		hInstance, // application instance
		NULL); // no extra params

	// check if window creation failed (hwnd would equal NULL)
	if (!hwnd)
		return 0;

	done = false; // initialize the loop condition variable
	// main message loop
	while (!done)
	{
		// the following line is changed so that the window will close
		// properly when clicking the upper left X;
		//PeekMessage(&msg, hwnd, NULL, NULL, PM_REMOVE);
		PeekMessage(&msg, NULL, NULL, NULL, PM_REMOVE);
		if (msg.message == WM_QUIT) // do you receive a WM_QUIT message?
		{
			done = true; // if so, time to quit the application
		}
		else
		{
			TranslateMessage(&msg); // translate and dispatch to event queue
			DispatchMessage(&msg);
		}
	}

	return msg.wParam;
}
